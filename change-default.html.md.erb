---
title: Changing Defaults Using Arbitrary Parameters
owner: MySQL
---

<strong><%= modified_date %></strong>

This topic provides instructions for how to use optional parameters to change server defaults.

## <a id="changes"></a>Overview

You can configure optional parameters to change certain <%= vars.product_full %> server defaults.
You might want to configure optional parameters in the following cases:

+ You have a read-heavy or write-heavy app.
See [Workloads](#workload) below.
+ You are migrating from a case-insensitive database.
See [Lowercase Table Names](#lowercase) below.
+ You want to use a different character set or collation than the default.
See [Character Sets](#character) below.
+ You want to configure leader-follower replication.
See [Synchronous Replication](#synchronous-replication) below.

The procedures in this topic use the Cloud Foundry Command Line Interface
([cf CLI](https://docs.pivotal.io/pivotalcf/devguide/services/managing-services.html)).
You can also use [Apps Manager](http://docs.pivotal.io/pivotalcf/console/dev-console.html)
to perform the same tasks using a graphical UI.


<p class="note"> <strong>Note:</strong>
<%= vars.product_short %> service instances are configured by default with industry best practices.
For information about the configured server defaults,
see <a href="server-defaults.html">About MySQL Server Defaults.</a>
</p>


## <a id="parameters"></a> Set Optional Parameters

You can change the default configuration of optional parameters by creating a new service instance or
updating an existing service instance.

To set optional parameters:

1. Do one of the following:
    +  **If you want to create a new service instance,** run:

          ```
        cf create-service p.mysql PLAN SERVICE-INSTANCE \
          -c '{ "PARAMETER": "PARAMETER-VALUE"}'
          ```
    +  <strong>If you want to update an existing service instance,</strong> run:

          ```
        cf update-service p.mysql PLAN SERVICE-INSTANCE \
          -c '{ "PARAMETER": "PARAMETER-VALUE"}'
          ```

      For a list of available optional parameters, see [Optional Parameters](#configuring) below.
      The `-c` flag accepts a valid JSON object containing service-specific configuration parameters,
      provided either in-line or in a file.<br>

1. Verify that the `cf` command executed successfully by running:

    ```
    watch cf services
    ```

    Wait for the `last operation` for your instance to show as `create succeeded`.
    <br><br>
    For example:

    <pre class="terminal">
   $ watch cf services
    Getting services in org my-org / space my-space as user<span>@</span>example.com...\
    OK

    name          service       plan        bound apps    last operation
    myDB          p.mysql       db-small                  create succeeded
</pre>

## <a id='workload'></a>Workloads

The table below describes how to use the `workload` optional parameter
 to adjust server default settings for different workload profiles:

<table>
  <tr>

    <th colspan="2" style="text-align:center;">workload</th>
  </tr>

  <tr>
    <th><strong>Type</strong></th>
    <td>String</td>
  </tr>

  <tr>
    <th><strong>Default</strong></th>
    <td><code>mixed</code></td>
  </tr>

  <tr>
    <th><strong>Description</strong></th>
    <td>Set this parameter to  <code>mixed</code>,
      <code>read-heavy</code> or <code>write-heavy</code>.
      See <a href="#workload-type">Workload Profile Types</a> below.</td>
  </tr>

  <tr>
    <th><strong>Usage</strong></th>
    <td><code>create-service</code> or <code>update-service</code></td>
  </tr>

</table>

### <a id='workload-type'></a> Workload Profile Types

The table below lists the workload profiles that developers
can use to configure MySQL instances based on their specific app workloads:


<table class="nice">
    <th>Profile</th><th>Description</th>
    <tr>
        <td>Mixed Workload</td>
        <td>By default, each MySQL service instance is configured for a mixed workload.
            This workload is equally heavy on reads and writes. <br><br>

            The configuration for this profile is described in
            <a href="./server-defaults.html">About MySQL Server Defaults</a>.
    </tr>

    <tr>
        <td>Read-Heavy Workload</td>
        <td>For apps that have a large number of reads, you can configure your
          service instances with a read-heavy workload.<br><br>
          The read-heavy profile changes the following server defaults listed in
          <a href="./server-defaults.html">About MySQL Server Defaults</a>:
          <ul>
            <li><code>innodb_buffer_pool_size</code>
              is increased to 75% of the available memory on each service instance.</li>

              <li><code>innodb_flush_method</code> is set to <code>O_DIRECT</code>.</li>
          </ul>

    <tr>
        <td>Write-Heavy Workload</td>
        <td>For apps that write to the database a lot, you can configure your
          service instances with a write-heavy workload.<br><br>
            The write-heavy profile changes the following server defaults listed in
                <a href="./server-defaults.html">About MySQL Server Defaults</a>:
          <ul>
          <li><code>innodb_buffer_pool_size</code>
            is increased to 75% of the available memory on each service instance.</li>
          <li><code>innodb_flush_method</code> is set to <code>O_DIRECT</code>.</li>
          <li><code>innodb_log_file_size</code> is increased to 1&nbsp;GB.</li>
          <li><code>max_allowed_packets</code> is increased to 1&nbsp;GB.</li>
          </ul>
</table>

## <a id="lowercase"></a>Lowercase Table Names

If you are migrating a database from a system that was case-insensitive,
you can enable lowercase table names to change all table names to lowercase.

For example, if your database had the table names `TableName` and `TABLEname`, when you enable
lowercase table names both of the above names change to `tablename` and are interpreted as the same table.

For more information, see the
[MySQL documentation](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_lower_case_table_names).

The table below describes how to use the `enable_lower_case_table_names` optional parameter:

<table>
  <tr>
    <th colspan="2" style="text-align:center;">enable_lower_case_table_names</th>
  </tr>

  <tr>
    <th><strong>Type</strong></th>
    <td>Boolean</td>
  </tr>

  <tr>
    <th><strong>Default</strong></th>
    <td>Set by the operator in the <strong>Mysql Configuration</strong> pane in the tile. See
      <a href="./install-config.html#mysql">Configure MySQL</a>.</td>
  </tr>

  <tr>
    <th><strong>Description</strong></th>
    <td>The operator can set a default for this parameter and permit developers to override the default.
       <br><br>
      If you set this to <code>true</code>, table names are stored in lowercase.
      See <a href="#lowercase">About Lowercase Table Names</a> below.
      <p class="note warning"><strong>Warning:</strong> Before you enable this feature,
ensure all tables have lowercase names. Tables with uppercase names are inaccessible
after enabling lowercase table names.</p></td>
  </tr>

  <tr>
    <th><strong>Usage</strong></th>
    <td><code>create-service</code> or <code>update-service</code></td>
  </tr>

</table>

## <a id='character'></a>Character Sets

The table below describes how to use the `default-charset` and  `default-collation`
optional parameters to change the character sets used in databases:

<table>
  <tr>
    <th colspan="2" style="text-align:center;">default-charset</th>
  </tr>

  <tr>
    <th><strong>Type</strong></th>
    <td>String</td>
  </tr>

  <tr>
    <th><strong>Default</strong></th>
    <td><code>utf8</code></td>
  </tr>

  <tr>
    <th><strong>Description</strong></th>
    <td>You can set this to any MySQL 5.7 supported character set.
      For information about character sets and collations,
      see the  <a href="https://dev.mysql.com/doc/refman/5.7/en/charset-mysql.html">MySQL documentation</a>.</td>
  </tr>

  <tr>
    <th><strong>Usage</strong></th>
    <td><code>create-service</code> or <code>update-service</code></td>
  </tr>

</table>

<table>
  <tr>
    <th colspan="2" style="text-align:center;">default-collation</th>
  </tr>

  <tr>
    <th><strong>Type</strong></th>
    <td>String</td>
  </tr>

  <tr>
    <th><strong>Default</strong></th>
    <td><code>utf8_general_ci</code></td>
  </tr>

  <tr>
    <th><strong>Description</strong></th>
    <td>The <code>default-collation</code> changes based on the <code>default-charset</code>.
      To set the <code>default-collation</code>, first set the <code>default-charset</code>. <br><br>
      For instructions for
      viewing available and default collations,
      see the <a href="https://dev.mysql.com/doc/refman/5.7/en/charset-charsets.html">
      MySQL documentation</a>.</td>
  </tr>

  <tr>
    <th><strong>Usage</strong></th>
    <td><code>create-service</code> or <code>update-service</code></td>
  </tr>

</table>

## <a id='synchronous-replication'></a>Synchronous Replication for Leader-Follower

If you use a leader-follower service instance, <%= vars.product_short %> supports synchronous replication in addition
to the default asynchronous replication. In sync replication, data does not get committed to the
leader node until the follower acknowledges the commit and can replicate it.

The guarantee of redundancy gives sync replication an advantage over asynchronous replication in data integrity.
However, depending on latency, sync replication reduces the performance of write operations.

The table below describes how to use the `replication_mode` optional parameter:

<p class="note"><strong>Note: </strong> <code>replication_mode</code> does not work
for single node, HA cluster, or multi-site replication plans.</p>

<table>
  <tr>
    <th colspan="2" style="text-align:center;">replication_mode</th>
  </tr>

  <tr>
    <th><strong>Type</strong></th>
    <td>String</td>
  </tr>

  <tr>
    <th><strong>Default</strong></th>
    <td><code>async</code></td>
  </tr>

  <tr>
    <th><strong>Description</strong></th>
    <td>Set this parameter to one of the following:
      <ul>
        <li><code>semi-sync:</code> This enables sync replication on a leader-follower service instance.</li>
        <li><code>async:</code> This restores the default asynchronous replication for a leader-follower service instance.</li>
      </ul>
  </tr>

  <tr>
    <th><strong>Usage</strong></th>
    <td><code>create-service</code> or <code>update-service</code></td>
  </tr>

</table>
<p class="note"><strong>Note:</strong>
  In <%= vars.product_short %>, replication is called sync, rather than semi-sync.
  This is because it is as synchronous as possible given the limits of MySQL. For more information about MySQL semi-sync
  replication,
  see the <a href="https://dev.mysql.com/doc/refman/5.7/en/replication-semisync.html">MySQL documentation</a>.

</p>

### <a id='replication-timeout'></a>Synchronous Replication Timeout

By default, the timeout for sync replication is set to approximately 292 million years. Therefore,
the leader always waits for the follower to confirm receipt of the transaction. This guarantees that
if the leader is lost, a redundant copy of the data exists on the follower.

<p class="note"><strong>Note:</strong> When the replication mode timeout is reached,
the replication mode automatically reverts to asynchronous without any user intervention.
You can manually override this timeout by setting a lower value.
</p>

The table below describes how to use the `semi_sync_ack_timeout_in_ms` optional parameter:

<table>
  <tr>
    <th colspan="2" style="text-align:center;">semi_sync_ack_timeout_in_ms</th>
  </tr>

  <tr>
    <th><strong>Type</strong></th>
    <td>Integer</td>
  </tr>

  <tr>
    <th><strong>Default</strong></th>
    <td>2<sup>63</sup> milliseconds</td>
  </tr>

  <tr>
    <th><strong>Description</strong></th>
    <td>Sets the timeout in milliseconds for the leader to acknowledge a replication operation. </td>
  </tr>

  <tr>
    <th><strong>Usage</strong></th>
    <td><code>create-service</code> or <code>update-service</code></td>
  </tr>

</table>


## <a id='backup-schedule'></a> Backup Schedule

The table below describes how to use the `backup-schedule` optional parameter:

<table>
  <tr>
    <th colspan="2" style="text-align:center;">backup-schedule</th>
  </tr>

  <tr>
    <th><strong>Type</strong></th>
    <td>Cron expression</td>
  </tr>

  <tr>
    <th><strong>Default</strong></th>
    <td>The operator sets the default</td>
  </tr>

  <tr>
    <th><strong>Description</strong></th>
    <td>
      Enter a cron expression using standard syntax.
      The cron expression sets the backup schedule for your service instance.
      For example, entering a cron expression of <code>15 10 * * *</code> triggers a backup 10:15 AM every day.
      Test your cron expression using a website such as <a href="https://crontab.guru/">Crontab Guru</a>.
      <p class="note">
        <strong>Note:</strong> Configuring a cron expression overrides the default schedule for your service instance.
      </p>
    </td>
  </tr>

  <tr>
    <th><strong>Usage</strong></th>
    <td><code>create-service</code> or <code>update-service</code></td>
  </tr>
</table>

## <a id='optimize_for_short_words'></a> Optimize for Short Words

The table below describes how to use the `optimize_for_short_words` optional parameter:

<table>
  <tr>
    <th colspan="2" style="text-align:center;">optimize_for_short_words</th>
  </tr>

  <tr>
    <th><strong>Type</strong></th>
    <td>Boolean</td>
  </tr>

  <tr>
    <th><strong>Default</strong></th>
    <td><code>false</code></td>
  </tr>

  <tr>
    <th><strong>Description</strong></th>
    <td>
    Set this parameter to <code>true</code> to change the MySQL system variable
    <code>innodb_ft_min_token_size</code> to 1.
    This allows shorter words to be stored in the InnoDB full-text index.<br><br>
    Because this has the side effect of increasing the size of the index,
    you must monitor the memory usage of the service instance and choose a larger VM type
    when necessary.
    Also, the operator needs to prevent the index from becoming too large and ineffective
    by removing entries as described below.
    How often this needs to be done depends on the workload and
    how much data is changed in the full-text index.
    <br>
    For more information about the <code>innodb_ft_min_token_size</code> system variable,
    see the <a href="https://dev.mysql.com/doc/refman/5.7/en/innodb-fulltext-index.html">MySQL
    documentation</a>.
    <br><br>
    To remove full-text index entries for deleted records or old records:<br><br>
    <ol>
      <li>Edit <code>my.cnf</code> to set <code>innodb_optimize_fulltext_only=ON</code>.
          <ul>
            <li>For single node and leader-follower plans, the path to the file is
          <code>/var/vcap/jobs/mysql/config/my.conf</code>.</li>
            <li>For HA cluster and <%= vars.single_leader_plan %> plans the path to the file is
          <code>/var/vcap/jobs/pxc-mysql/config/my.conf</code>.</li>
          </ul>
       </li>
       <li>Run <code>OPTIMIZE TABLE</code> on the indexed tables.</li>
       <li>When the optimization is done, set <code>innodb_optimize_fulltext_only=OFF</code>
           so that the query behaves normally for other tables.</li>
    </ol>

    For more information about InnoDB full-text index deletion,
    see the <a href="https://dev.mysql.com/doc/refman/5.7/en/innodb-fulltext-index.html#innodb-fulltext-index-deletion">MySQL
    documentation</a>.
    </td>
  </tr>

  <tr>
    <th><strong>Usage</strong></th>
    <td><code>create-service</code> or <code>update-service</code></td>
  </tr>
</table>
