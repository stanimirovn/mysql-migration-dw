---
title: Backing Up and Restoring VMware Tanzu SQL with MySQL for VMs
owner: MySQL
---

<strong><%= modified_date %></strong>

<p class="note">
  <strong>Note:</strong> The backup and restore capability described in this topic
  restores a <i>running</i> service instance's backup to a new instance.
  It is not intended to list or restore backups created by a deleted service instance.
  For more information about restoring a backup from a deleted service instance,
  see <a href="./manual-restore.html">Manually Restoring From Backup</a>.
</p>

<p class="note">
  <strong>Note:</strong> In <%= vars.product_short %> v2.9.0 to v2.9.2, the ApplicationDeveloperBackupRestore
  (adbr) feature stored backup artifacts in the <i>root</i> directory in external storage.
  <br><br>
  As of v2.9.3, backup artifacts are organized under subfolders in external storage.
  They are now stored under <code>p.mysql > service-instance_GUID > yyyy > mm > dd</code>.
  <br><br>
  Old backup artifacts stored in the root directory can still be accessed through the cf CLI using the
  adbr plugin.
</p>


This topic describes how to back up and restore a physical backup
to a <%= vars.product_full %> service instance.
Both operators and developers can use the procedures in this topic.

Operators can configure automated backups in the <%= vars.product_short %> tile by following the procedures in
[Configuring Automated Backups](./automated-backup.html).

Developers can manually take physical backups by following the procedure in this topic.
Developers can also create logical backups using `mysqldump`.
For more information about logical backups, see [Backing Up and Restoring with mysqldump](./backup-mysqldump.html).

## <a id="overview"></a> Overview

You can back up and restore a <%= vars.product_short %> service instance using the
Cloud Foundry Command Line Interface (cf CLI).
The backup artifacts you create in this topic are physical backups.
The following procedures do not create logical backup artifacts.
Restoring a physical backup is faster than restoring a logical backup and
has less downtime.

You might want to back up or restore a service instance in the following use cases:

+ Disaster recovery
+ Troubleshooting
+ Testing


## <a id="about-backups"></a>About Backups

Automated backups do the following:

- Periodically create and upload backups for restoring all of the databases used
by a service instance.
- Operate without locking apps out of the database. There is no downtime.
- Include a metadata file that contains the critical details for the backup,
including the calendar time of the backup.
- Encrypt backups within the <%= vars.product_short %> VM.
Unencrypted data is never transferred outside the <%= vars.product_short %> deployment.
- Run at scheduled time. Operators configure the default schedule in <%= vars.ops_manager %>.
Developers can change the backup schedule for an individual service instance using
an arbitrary parameter. For more information, see [Backup Schedule](./change-default.html#backup-schedule).

Automated backups fail if the service broker is unavailable, such as during an upgrade.

<p class="note"><strong>Note:</strong>
  You must configure backups in the <%= vars.product_short %> tile.
  You cannot be disable this feature.
</p>

<p class="note"><strong>Note:</strong>
  As of v2.9, only the leader node is backed up for a leader-follower deployment.
</p>

<p class="note warning"><strong>Warning:</strong>
  If <%= vars.product_short %> fails to upload a backup, the backup artifact remains on the persistent disk.
  This can cause the persistent disk to fill up faster.
  If the persistent disk is full, apps become inoperable.
  For instructions on how to troubleshoot persistent disk errors,
  see <a href="./troubleshoot.html#persistent-disk">Persistent Disk is Full</a>.
</p>

## <a id="understanding-metadata"></a> About Backup Files and Metadata

When <%= vars.product_short %> runs a backup,
it uploads two files with Unix epoch-timestamped filenames:

  * The encrypted data backup file, `mysql-backup-TIMESTAMP.tar.gpg`
  * A metadata file, `mysql-backup-TIMESTAMP.txt`

The metadata file contains information about the backup that looks similar to the following:

```
ibbackup_version = 2.4.5
end_time = 2017-04-24 21:00:03
lock_time = 0
binlog_pos =
incremental = N
encrypted = N
server_version = 5.7.16-10-log
start_time = 2017-04-24 21:00:00
tool_command = --user=admin --password=... --stream=tar tmp/
innodb_from_lsn = 0
innodb_to_lsn = 2491844
format = tar
compact = N
name =
tool_name = innobackupex
partial = N
compressed = N
uuid = fd13cf26-2930-11e7-871e-42010a000807
tool_version = 2.4.5
```

The most important entries in the metadata file are the following:

+ `start_time`: Use this to determine which transactions are captured in the backup.
+ `server_version`: Use this to determine potential incompatibilities
when restoring an instance with the backup artifact.

The backup process does not interrupt the MySQL service.
However backups only reflect transactions that are completed before the `start_time`.

<p class="note"><strong>Note:</strong>
  The metadata file sets <code>compressed</code> <code>encrypted</code> as <code>N</code>, which
  indicates that the backup is not compressed or encrypted.
  However, the backup uploaded by <%= vars.product_short %> is both compressed and encrypted.
  This is a known issue.
</p>

## <a id='prerequisite'></a> Prerequisite: adbr Plugin

Before you can manually back up or restore a service instance,
you must have installed the ApplicationDataBackupRestore (adbr) plugin
for the Cloud Foundry Command Line Interface (cf CLI) tool.

To install the plugin, run:

```
cf install-plugin -r CF-Community "ApplicationDataBackupRestore"
```

<p class="note">
   <strong>Note:</strong> The procedures on this page assume that
   you are using the adbr plugin v0.3.0 or later.
</p>

## <a id="backup"></a> Manually Back Up a Service Instance

To manually trigger a backup outside of the configured schedule:

1. Back up your service instance by running:

    ```
    cf adbr backup SOURCE-INSTANCE
    ```

    Where `SOURCE-INSTANCE` is the service instance you are backing up.
1. View the status of the backup process by running:

    ```
    cf adbr get-status SOURCE-INSTANCE
    ```

    For example:

    <pre class="terminal">$ cf adbr get-status myDB
      Getting status of service instance myDB in org my-org / space my-space as user...
      [Fri May 28 18:08:25 UTC 2021] Status: Backup was successful. Uploaded 3.2M</pre>

## <a id="restore"></a> Restore a Service Instance

When restoring a service instance, you create a new service instance
and then restore the backup to it.
If you are restoring leader-follower or HA cluster service instance,
you update the plan after restoring the data.
Finally, you rebind and restage apps that use the service instance.

###<a id="restore-concepts"></a>About Restoring a Service Instance

Before you begin the restore procedure below, review the following important concepts:

+ [The Topology of the Instance You Restore To](#instance-types)
+ [When to Use a Different Restore Method](#different-cases)
+ [The New Database Must Be Empty](#empty-database)

####<a name="instance-types"></a> The Topology of the Instance You Restore To

You can only restore to a single node or a <%= vars.single_leader_plan %> service instance.
If you want a different topology, update the instance after restoring the data:

<table class="nice">
<col width="33%">
<col width="33%">
  <th>To restore to…</th>
  <th>First, restore to…</th>
  <th>Then, update to…</th>
  <tr>
    <td>Leader-Follower</td>
    <td>Single node</td>
    <td>Leader-Follower</td>
  </tr>
  <tr>
    <td>HA cluster</td>
    <td><%= vars.single_leader_plan %></td>
    <td>HA cluster</td>
  </tr>
  <tr>
    <td><%= vars.single_leader_plan %></td>
    <td><%= vars.single_leader_plan %></td>
    <td><em>n/a</em></td>
  </tr>
  <tr>
    <td>Single node</td>
    <td>Single node</td>
    <td><em>n/a</em></td>
  </tr>
</table>

Operators must ensure that the persistent disk in the single node plan is at least as large
as the persistent disk of the largest leader-follower plan.
Similarly, they must ensure that the persistent disk in the <%= vars.single_leader_plan %> plan
is at least as large as the persistent disk of the largest HA cluster plan.
For information about persistent disk sizing recommendations,
see <a href="recommended.html#persistent"> Persistent Disk Usage</a>.

####<a name="different-cases"></a> When to Use a Different Restore Method

There are some cases where you cannot use the procedure below:

<table class="nice">
<col width="50%">
<col width="50%">
  <th>Do not use the procedure in this section to restore a backup…</th>
  <th>Instead, see…</th>
  <tr>
    <td>created with <%= vars.product_short %> v2.8 or earlier</td>
    <td><a href="http://docs.pivotal.io/p-mysql/2-8/restore.html">
     Restoring <%= vars.product_short %></a>.</td>
  </tr>
  <tr>
    <td>from a deleted service instance</td>
    <td><a href="manual-restore.html">Manually Restoring from Backup</a>.</td>
  </tr>
  <tr>
    <td>to a different foundation</td>
    <td><a href="manual-restore.html">Manually Restoring from Backup</a>.</td>
  </tr>
</table>

####<a name="empty-database"></a> The New Database Must Be Empty

Do not write anything to the database in the new service instance
until after you have restored the backup to it.
For example, the following actions write to the database:

+ You create service keys.
+ You configure the service instance for <%= vars.single_leader_plan %>.
+ <%= vars.product_short %> takes an automatic backup.

If the database is not empty, then the adbr plugin fails to restore the data and
you need to delete the service instance and create another.


###<a id="procedure"></a> Procedure to Restore a Service Instance

To restore a service instance:

1. Create a new MySQL service instance to restore to by running:

    ```
    cf create-service p.mysql NEW-PLAN DESTINATION-INSTANCE
    ```

    Where:
    + `NEW-PLAN` is the name of the service plan for your new service instance.
        The plan you choose depends on the service instance topology that you are
        restoring. If the topology that you are restoring is:
          + **Single node or leader-follower:** Select a single node plan.
          + **<%= vars.single_leader_plan %> or HA cluster:**
              Select a <%= vars.single_leader_plan %> plan.
    + `DESTINATION-INSTANCE` is a name that you choose to identify the service instance.

    You restore the backup artifact to this service instance.
    For more information, see [Create a Service Instance](./use.html#create).

1. View the available backup artifacts for your service instance by running:

    ```
    cf adbr list-backups SOURCE-INSTANCE --limit NUMBER
    ```

    Where:
    * `SOURCE-INSTANCE` is the name of the service instance.
    * `--limit NUMBER` is an optional flag to specify how many backups to list.
      Without the flag, the command lists five backups.  

    For example:
    <pre class="terminal">$ cf adbr list-backups myDB --limit 1
      Getting backups of service instance myDB in org my-org / space my-space as user...
      Backup ID                                         Time of Backup
      a41bf723-2538-4020-9d16-50cccb7b7c8d_1589825284   Fri May 28 18:08:04 UTC 2021</pre>

      Record the `Backup ID` from the above output.

1. Restore the service instance by running:

    ```
    cf adbr restore DESTINATION-INSTANCE BACKUP-ID
    ```
    Where is `BACKUP-ID` is the ID you recorded in the above step. <br><br>

    For example:

    <pre class="terminal">$ cf adbr restore myTargetDB a41bf723-2538-4020-9d16-50cccb7b7c8d_1589825284</pre>

1. View the status of the restore process by running:

    ```
    cf adbr get-status DESTINATION-INSTANCE
    ```

    For example:

    <pre class="terminal">$ cf adbr get-status myTargetDB
      Getting status of service instance myTargetDB in org my-org / space my-space as user...
      [Mon May 31 22:29:24 UTC 2021] Status: Restore was successful </pre>

    If the status is `Restore failed`, see [The New Database Must Be Empty](#empty-database) above.

1. If you are restoring a leader-follower or HA cluster service instance,
    update the plan by running:

    ```
    cf update-service DESTINATION-INSTANCE -p PLAN
    ```
    Where `PLAN` is the plan for the topology that you want to restore.

1. Determine if your app is bound to a service instance by running:

    ```
    cf services
    ```

    For example:
    <pre class="terminal">$ cf services
    Getting services in org my-org / space my-space as user...
    OK
    name          service     plan        bound apps    last operation
    myDB          p.mysql     db-small    my-app        create succeeded
    myTargetDB    p.mysql     db-small                  create succeeded
    </pre>

1. If an app is currently bound to a service instance, unbind it by running:

    ```
    cf unbind-service APP-NAME SOURCE-INSTANCE
    ```

    <%= partial vars.path_to_partials + "/mysql/rebind-warning" %>

1. Update your app to bind to the new service instance by running:

    ```
    cf bind-service APP-NAME DESTINATION-INSTANCE
    ```

1. Restage your app by running:

    ```
    cf restage APP-NAME
    ```

##<a id="troubleshooting-adbr"></a> Troubleshooting the adbr Plugin

If you get HTTP error codes when working with the adbr plugin,
see [Failed Backup or Restore with adbr Plugin](troubleshoot-instances.html#failed-adbr)
in _Troubleshooting On-Demand Instances_.

##<a id="monitor-backups"></a> Monitor Backups

It is particularly important to verify that automated backups are being taken according to schedule.
A common cause of failure for automated backups is the persistent disk filling up.

Two ways to check that backups are being made:

+ [Use the adbr Plugin to List Backups](#use-adbr)
+ [Use Healthwatch to Confirm Automated Backups](#use-healthwatch)

### <a id="use-adbr"></a> Use the adbr Plugin to List Backups

The `adbr` plugin is a quick way to list backups for a service instance.
The plugin lists the last five backups for a service instance.
The list includes both automated and manual backups.

1. List the backups for an instance using the `adbr` plugin by running:

    ```
    cf adbr list-backups SOURCE-INSTANCE --limit NUMBER
    ```

    Where:
    * `SOURCE-INSTANCE` is the name of the service instance.
    * `--limit NUMBER` is an optional flag to specify how many backups to list.
      Without the flag, the command lists five backups.  

    For example:
    <pre class="terminal">$ cf adbr list-backups myDB
    Getting backups of service instance myDB in org my-org / space my-space as admin...
    Backup ID                                         Time of Backup
    f4df63d3-ece1-4b53-99a4-4b55ad10af2f_1596675600   Wed Jun  2 01:00:00 UTC 2021
    f4df63d3-ece1-4b53-99a4-4b55ad10af2f_1596675420   Wed Jun  2 00:57:00 UTC 2021
    f4df63d3-ece1-4b53-99a4-4b55ad10af2f_1596675240   Wed Jun  2 00:54:00 UTC 2021
    f4df63d3-ece1-4b53-99a4-4b55ad10af2f_1596675000   Wed Jun  2 00:50:00 UTC 2021
    f4df63d3-ece1-4b53-99a4-4b55ad10af2f_1596674700   Wed Jun  2 00:45:00 UTC 2021
    </pre>

### <a id="use-healthwatch"></a> Use Healthwatch to Confirm Automated Backups

You can use Healthwatch to confirm that automated backups are being taken
on the schedule configured by the operator.
For information about configuring the schedule for automated backups,
see [Configuring Automated Backups](./automated-backup.html).

For each backup of every service instance,
<%= vars.product_short %> emits a metric
called `last_successful_backup`.

1. Monitor the `last_successful_backup` metric through Healthwatch.

    For details about the metric,
    see [Hours Since Last Successful Backup](./monitor.html#last-successful-backup)
    in _Monitoring and KPIs for <%= vars.product_full %>_.<br><br>

    A healthy backup metric shows a saw-tooth plot.
    The blue stepped line is the time elapsed since the last backup.
    The dotted red line represents the scheduled time when an automated backup is expected to occur.
    When a backup is taken, the time elapsed resets to zero.

    <%= image_tag("metric-since-last-backup-healthy.png", :alt => "A plot of the last successful backup metric. The metric increases linearly until the backup is made. The metric falls back to zero and then increases again.", :width => "720") %>

    <a href="./images/metric-since-last-backup-healthy.png" target="_blank" aria-hidden="true">View a larger version of this image</a>
