---
title: Monitoring and KPIs for VMware Tanzu SQL with MySQL for VMs
owner: MySQL
---

<strong><%= modified_date %></strong>

This topic describes how to monitor the health of the <%= vars.product_full %> service
using logs, metrics, and Key Performance Indicators
(KPIs) generated by <%= vars.product_short %> component VMs.

For more information about logging and metrics in <%= vars.app_runtime_full %>, see
[Overview of Logging and Metrics](https://docs.pivotal.io/application-service/loggregator/data-sources.html).

## <a id="metrics"></a>About Metrics

Metrics are regularly-generated log entries that report measured component states.
The default metrics polling interval is 30 seconds for MySQL instances. For the service broker, the default is 60 seconds.

You can configure the MySQL instance interval in **Configure Monitoring**
in the <%= vars.product_short %> tile. For more information, see [Configure Monitoring](./install-config.html#monitoring).

Metrics are long, single lines of text with the format:

```
origin:"p.mysql" eventType:ValueMetric timestamp:1496776477930669688 deployment:"service-instance_2b5a001f-2bf3-460c-aee6-fd2253f9fb0c" job:"mysql" index:"b09df494-b731-4d06-a4b0-c2985ceedf4c" ip:"10.0.8.4" valueMetric:<name:"/p.mysql/performance/open_files" value:24 unit:"file" >
```

## <a id="access"></a>Access MySQL Metrics

To access MySQL metrics:

+ [Use the Indicator Protocol Dashboard](#indicator)
+ [Use Log Cache](#log-cache)

###  <a id="indicator"></a>Use the Indicator Protocol Dashboard

You can use the Indicator Protocol dashboard to view Key Performance Indicators (KPIs)
for <%= vars.product_short %> service instances. The dashboard includes a graphical representation of the KPIs and information about recommended alert thresholds.

For more information about the Indicator Protocol dashboard, see [Indicator Protocol Dashboard
(Beta)](https://docs.pivotal.io/platform/healthwatch/indicator-protocol.html).
For information about <%= vars.product_short %> KPIs, see [KPIs for MySQL Service Instances](#kpi) below.

To access KPIs using the Indicator Protocol dashboard:

1. Install the Healthwatch tile in <%= vars.ops_manager %>. See [Installing
and Configuring Healthwatch](https://docs.pivotal.io/platform/healthwatch/installing.html).
1. Enable the Indicator Protocol add-on in <%= vars.ops_manager %>. See [Enable the Indicator Protocol
Add-on](https://docs.pivotal.io/platform/healthwatch/indicator-protocol.html#enable-add-on).
1. View the Indicator Protocol Dashboard by navigating to:

    ```
    https://healthwatch.YOUR-SYSTEM-DOMAIN/indicator-dashboards
    ```

The following image shows an example of the Indicator Protocol dashboard for a highly available
(HA) cluster service instance:

![This screenshot shows KPIs metrics for MySQL server availability, the percentage of available connections,
CPU utilization percentage, queries delta, ephemeral disk percent, and persistent disk percent. The value of the
metrics are shown as graphs over time.](indicator-dash.png)

<a href="./images/indicator-dash.png" target="_blank" aria-hidden="true">View a larger version of this image</a>

<!-- The below partial is in https://github.com/pivotal-cf/docs-partials -->

### <a id="log-cache"></a>Use Log Cache
<%= partial vars.path_to_partials + '/services/log-cache-cli-plugin',
:locals => {:service_name => vars.product_short} %>


## <a id="kpi"></a>KPIs for MySQL Service Instances

KPIs are metrics for MySQL service instances that you can monitor for two purposes:

- To ensure high performance.

- To discover emerging issues.

KPIs can be either raw component metrics or derived metrics generated by applying formulas to raw metrics.

VMware provides the following KPIs as general alerting and response guidance
for typical <%= vars.product_short %> installations.
VMware recommends that you alter the alert measures by observing historical trends.
You can also create your KPIs that are specific to your environment using the available component metrics.

For a list of all the <%= vars.product_short %> component metrics, see [Component Metrics](#component-metrics) below.

<%= partial vars.path_to_partials + '/mysql/monitoring/kpis-metrics/all-kpis' %>

<%= partial vars.path_to_partials + '/mysql/monitoring/kpis-metrics/2-9-and-later-kpis' %>

## <a id="component-metrics"></a>Component Metrics

In addition to the above KPIs, the MySQL service emits the followings metrics for monitoring and alerting:

  + [MySQL Metrics](#mysql-metrics)
  + [Disk Metrics](#disk-metrics)
  + [Leader-Follower Metrics](#l-f-metrics)
  + [Highly Available Cluster Metrics](#ha-metrics)

### <a id="mysql-metrics"></a>MySQL Metrics

The metrics that all <%= vars.product_short %> service instances emit:

<%= partial vars.path_to_partials + '/mysql/monitoring/kpis-metrics/mysql-metrics' %>

### <a id="disk-metrics"></a>Disk Metrics

The disk usage metrics that all <%= vars.product_short %> services emit:

<%= partial vars.path_to_partials + '/mysql/monitoring/kpis-metrics/disk-metrics' %>

### <a id="l-f-metrics"></a>Leader-Follower Metrics

The metrics that leader-follower VMs emit:

<%= partial vars.path_to_partials + '/mysql/monitoring/kpis-metrics/l-f-metrics' %>

### <a id="ha-metrics"></a>Highly Available Cluster Metrics

The metrics that HA clusters emit:

<%= partial vars.path_to_partials + '/mysql/monitoring/kpis-metrics/ha-metrics' %>
