---
title: Backing Up and Restoring with mysqldump
owner: MySQL
---

<strong><%= modified_date %></strong>

This topic describes how to manually create a logical backup with `mysqldump` and
restore a MySQL database with the backup.

## <a id="overview"></a> Overview

A logical backup reproduces the database table structure and data, without copying the InnoDB data files.
The backup contains SQL statements to re-create the data.
Because of this, restoring a logical backup takes longer that restoring a physical backup.
While the backup is running, operations against the database are stalled.

You might want to create a logical backup in the following use cases:

+ Migrating a <%= vars.product_short %> database to an off-platform database.
+ Backing up specific individual <%= vars.product_short %> databases.
+ Editing table definitions or insert statements before restoring the <%= vars.product_short %> database.
+ Migrating an off-platform database with encryption at rest or the Percona PAM Authentication plugin
enabled to a <%= vars.product_short %> database.
See [Restore from an Off-Platform Logical Backup](#external).

In most cases, if you want to copy a <%= vars.product_short %> database you should use the `migrate` command.
For information about using the `migrate` command, see [About Data Migration in <%= vars.product_short %>](./about-migrate.html).

You can create a physical backup by following the procedure in [Backing Up and Restoring <%= vars.product_full %> ](./backup-restore.html#backup).

Additionally, operators can configure physical backups of your MySQL database in <%= vars.product_short %>
tile.
For information about backups configured by operators,
see [Configuring Automated Backups](./automated-backup.html).

<p class="note"><strong>Note:</strong> When you take a logical backup, <%= vars.product_short %>
does not send an email notification.</p>


## <a id="manual-backup"></a> Back Up and Restore a <%= vars.product_short %> Logical Backup

To back up and restore a <%= vars.product_short %> logical backup:

1. Create a logical backup of your database. See [Create a <%= vars.product_short %> Logical Backup](#create-backup) below.
1. Restore the logical backup to a <%= vars.product_short %> service instance.
See [ Restore from a <%= vars.product_short %> Logical Backup](#restore-backup) below.


### <a id="create-backup"></a> Create a <%= vars.product_short %> Logical Backup

<%= vars.product_short %> disables remote admin access to MySQL databases.
Because of this, you must create a read-only service key to access the database for the service instance you want to back up.

To back up your <%= vars.product_short %> data manually:

1. Create and retrieve read-only access credentials by following the procedure in
[Create Read-only Access Credentials](./customize-access.html#read-only).

1. From the output of the previous step, record the following values:
    * `hostname`: The MySQL BOSH DNS hostname
    * `password`: The password for the user that can be used
    for backups of the service instance database
    * `username`: The username for the user that can be used for
     backups of the service instance database

1. Connect to your service instance, by either service-gateway access or an SSH tunnel.
   For more information, see [Creating a Service Instance with Service-Gateway Access](./create-service-gateway-instance.html)
   or [Using SSH to Connect from Outside a Deployment](./establish.html).

1. View a list of your databases by running:
<pre><code>mysql --user=USERNAME --password=PASSWORD \
--host=MYSQL-IP \
--silent --execute='show databases'</code></pre>

    Where:
    * `USERNAME` is the username retrieved from the output of `cf service-key`.
    * `PASSWORD` is the password retrieved from the output of `cf service-key`.
    * `MYSQL-IP` is the MySQL IP address. This value is `0` if you are connecting using an SSH tunnel.

    For example:
    <pre class="terminal">
    $ mysql --user=abcdefghijklm --password=123456789 \
    --host=10.10.10.5 \
    --silent --execute='show databases'
    </pre>

1. Do not back up the following databases:
    * `cf_metadata`
    * `information_schema`
    * `mysql`
    * `performance_schema`
    * `sys`

1. For each remaining database, back up by running:

    ```
    mysqldump --set-gtid-purged=off --single-transaction \
    --user=USERNAME --password=PASSWORD \
    --host=MYSQL-IP \
    --databases DB-NAME > BACKUP-FILE
    ```

    Where:
    * `USERNAME` is the username retrieved from the output of `cf service-key`.
    * `PASSWORD` is the password retrieved from the output of `cf service-key`.
    * `MYSQL-IP` is the MySQL IP address.
    * `DB-NAME` is the name of the database.
    * `BACKUP-FILE` is a name you create for the backup file. Use a different filename for each backup.

    The `--set-gtid-purged=off` flag enables you to restore the backup without admin privileges. <br><br>

    For example:
    <pre class="terminal">
    $ mysqldump --set-gtid-purged=off --single-transaction \
    --user=abcdefghijklm --password=123456789 \
    --host=10.10.10.5 \
    --databases canary\_db > canary\_db.sql
    </pre>

    For more information about the mysqldump utility, see
    [mysqldump](https://dev.mysql.com/doc/refman/5.7/en/using-mysqldump.html) in the MySQL Documentation.


### <a id="restore-backup"></a> Restore from a <%= vars.product_short %> Logical Backup

To restore a logical backup:

1. (Optional) If you want to create a new service instance,
do the procedure in [Create a Service Instance](./use.html#create).

1. Retrieve the credentials for the service instance you are restoring the backup to by following steps 1 and 2 in
[Create a <%= vars.product_short %> Logical Backup](#create-backup) above.
You can either restore the backup to an existing service instance or the one you created in step 1.

1. Connect to your service instance, by either service-gateway access or an SSH tunnel.
   For more information, see [Creating a Service Instance with Service-Gateway Access](./create-service-gateway-instance.html)
   or [Using SSH to Connect from Outside a Deployment](./establish.html).

1. Restore your data from the SQL file on your local machine by running:

    ```
    mysql --user=USERNAME --password=PASSWORD --host=MYSQL-IP  < BACKUP-FILE
    ```
    Where:
    * `USERNAME` is the username retrieved from the output of `cf service-key`.
    * `PASSWORD` is the password retrieved from the output of `cf service-key`.
    * `MYSQL-IP` is the MySQL IP address.
    * `BACKUP-FILE` is the name of your backup artifact.


## <a id="external"></a> Restore from an Off-Platform Logical Backup

This section assumes that you have already created a logical backup for your off-platform database
using `mysqldump`.

If you want to restore a logical backup from an off-platform database that has encryption at rest or
the Percona PAM Authentication plugin enabled, you cannot use the `migrate` command.


To restore an off-platform logical backup to a <%= vars.product_short %> database:

1. If your database has encryption at rest enabled, delete all instances of `ENCRYPTION='Y'` from
your backup artifact.

1. Retrieve your service instance GUID by running:

    ```
    cf service SERVICE-INSTANCE-NAME --guid
    ```
    Record the output.

1. Copy the backup artifact to the service instance by running:

    ```
    bosh -d service-instance_GUID scp ./BACKUP-FILE mysql:/tmp/
    ```
    Where `GUID` is the GUID you recorded in the previous step.


1. SSH into the service instance by running:

    ```
    bosh -d service-instance_GUID ssh
    ```

1. Restore your backup artifact into mysql by running:

    ```
    mysql --defaults-file=/var/vcap/jobs/mysql/config/mylogin.cnf  \
    -D SERVICE-INSTANCE-NAME < /tmp/BACKUP-FILE
    ```
